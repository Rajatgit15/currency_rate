{"version":3,"sources":["Row.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","currencyOption","selectedCurrency","onChangeCurrency","amount","onChangeAmount","className","type","value","onChange","map","option","key","API","App","toAmount","fromAmount","useState","setCurencyOption","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRates","setExchangeRates","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstcurrency","Object","keys","rates","base","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gNAwBeA,MArBf,SAAaC,GAAO,IAETC,EAIKD,EAJLC,eACPC,EAGYF,EAHZE,iBACAC,EAEYH,EAFZG,iBACJC,EACgBJ,EADhBI,OACAC,EAAgBL,EAAhBK,eACI,OACI,6BACI,2BAAOC,UAAU,QAAQC,KAAK,SAASC,MAASJ,EAAQK,SAAUJ,IAClE,4BAAQC,UAAU,KAAKE,MAAON,EAAkBO,SAAUN,GACrDF,EAAeS,KAAI,SAAAC,GAAM,OACtB,4BAAQC,IAAMD,EAAQH,MAAQG,GAASA,SCVnDE,EAAO,yCAwEAC,MAtEf,WAAe,IAUTC,EAAUC,EAVF,EAG8BC,mBAAS,IAHvC,mBAGNhB,EAHM,KAGUiB,EAHV,OAI0BD,qBAJ1B,mBAINE,EAJM,KAIQC,EAJR,OAKsBH,qBALtB,mBAKNI,EALM,KAKMC,EALN,OAM6BL,qBAN7B,mBAMLM,EANK,KAMUC,EANV,OAOeP,mBAAS,GAPxB,mBAOLb,EAPK,KAOGqB,EAPH,OAQ0CR,oBAAS,GARnD,mBAQNS,EARM,KAQgBC,EARhB,KAkDZ,OAvCGD,GACDV,EAAYZ,EACZW,EAAUX,EAASmB,IAEnBR,EAAWX,EACXY,EAAaZ,EAASmB,GAGxBK,qBAAU,WACRC,MAAMhB,GACLiB,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAiB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACjDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAiBS,EAAKI,MAAMH,SAE9B,IAEFN,qBAAU,WACW,MAAhBT,GAAoC,MAAZE,GACzBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAgBM,EAAhB,oBAAwCE,IAC5CS,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAGT,EAAiBS,EAAKI,MAAMhB,SAE3C,CAACF,EAAcE,IAcf,oCACA,kDACA,kBAAC,EAAD,CAAKpB,eAAgBA,EACrBC,iBAAoBiB,EACpBhB,iBAAmB,SAAAoC,GAAC,OAAGnB,EAAgBmB,EAAEC,OAAOhC,QAChDJ,OAASY,EACTX,eAlBD,SAAgCkC,GAC/Bd,EAAUc,EAAEC,OAAOhC,OACnBmB,GAAwB,MAkBxB,yBAAKrB,UAAU,UAAf,KACA,kBAAC,EAAD,CAAKL,eAAgBA,EACrBC,iBAAoBmB,EACpBlB,iBAAmB,SAAAoC,GAAC,OAAGjB,EAAciB,EAAEC,OAAOhC,QAC9CJ,OAASW,EACTV,eApBF,SAA+BkC,GAC7Bd,EAAUc,EAAEC,OAAOhC,OACnBmB,GAAwB,QCzCRc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9084a041.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Row(props){\r\n\r\n    const {currencyOption,\r\n    selectedCurrency,\r\n    onChangeCurrency,\r\namount,\r\nonChangeAmount}=props\r\n    return(\r\n        <div>\r\n            <input className='input' type='number' value = {amount} onChange={onChangeAmount}/>\r\n            <select className='ut' value={selectedCurrency} onChange={onChangeCurrency}>\r\n                {currencyOption.map(option => (\r\n                    <option key= {option} value ={option}>{option}</option>\r\n                ))}\r\n                \r\n            </select>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Row from './Row'\n\n\n  const API =  'https://api.exchangeratesapi.io/latest'\n\nfunction App(){\n\n\n  const[currencyOption, setCurencyOption] = useState([])\n  const[fromCurrency, setFromCurrency]= useState()\n  const[toCurrency, setToCurrency]= useState()\n  const [exchangeRates, setExchangeRates]= useState()\n  const [amount, setAmount]= useState(1)\n  const[amountInFromCurrency, setAmountInFromCurrency]= useState(true)\n\n  let toAmount, fromAmount\n  if(amountInFromCurrency){\n    fromAmount= amount\n    toAmount= amount * exchangeRates\n  } else{\n    toAmount = amount\n    fromAmount = amount / exchangeRates\n  }\n\n  useEffect(()=>{\n    fetch(API)\n    .then(res=> res.json())\n    .then(data=> {\n      const firstcurrency = Object.keys(data.rates)[0]\n      setCurencyOption([data.base, ...Object.keys(data.rates)])\n      setFromCurrency(data.base)\n      setToCurrency(firstcurrency)\n      setExchangeRates(data.rates[firstcurrency])\n    })\n  },[])\n  \n  useEffect(()=>{\n    if(fromCurrency != null && toCurrency!=null){\n      fetch(`${API}?base=${fromCurrency}&symbols=${toCurrency}`)\n      .then(res=>res.json())\n      .then(data=> setExchangeRates(data.rates[toCurrency]))\n    }\n  },[fromCurrency, toCurrency])\n\n   function handleFromAmountChange(e){\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange (e){\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n\n  return(\n    <>\n    <h1>CURRENCY CONVERTOR</h1>\n    <Row currencyOption={currencyOption}\n    selectedCurrency = {fromCurrency}\n    onChangeCurrency= {e=> setFromCurrency(e.target.value)}\n    amount= {fromAmount}\n    onChangeAmount ={handleFromAmountChange}\n    />\n    <div className='equals'>=</div>\n    <Row currencyOption={currencyOption}\n    selectedCurrency = {toCurrency}\n    onChangeCurrency= {e=> setToCurrency(e.target.value)}\n    amount= {toAmount}\n    onChangeAmount ={handleToAmountChange}/>\n    </>\n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}